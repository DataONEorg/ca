#!/bin/bash
# 
# Create, revoke, or display an x509 private key and public certificate 
# for the given NODEID. The NODEID determines the names of various files that
# are created as well as the Subject of certificates created.
#
# Dependencies:
#   openssl, echo, sed, tr
#
# Matthew Jones, NCEAS, 2012

#initialization
VERSION="1.2.0"
APPNAME=$(basename ${0})
APPDIR=$(pwd)
dateformat_out="%Y-%m-%dT%H:%M:%S.000+00:00"
crlUpdateDate=""
OPENSSL="/usr/bin/openssl"
MD="sha1"

###################################################################################
# Main entrypoint into the application, dispatching to appropriate handler methods
###################################################################################
function main {
    setoptions
    switch_server_env
    case "${OP}" in
         -c)
               create
               ;;
         -r)
               revoke
               ;;
         -d)
               display
               ;;
         -g)
               gencrl
               ;;
         -v)
               verify
               ;;
         -h)
               usage
               ;;
         *)
               display
               ;;
    esac
}

###################################################################################
# Set the environment options used throughout the functions
###################################################################################
function setoptions {
    # Set default options
    KEYSIZE=2048
    DAYS="-days 1095"
    
    # Set command shortcuts
    KEYS="private"
    PASS="pass:temp"
    CFG="openssl.cnf"
    CFG_TEMP="openssl.int"
    TMPL="openssl.tmpl"
    KEY="$KEYS/$NODEID.key"
    PEM="certs/$NODEID.pem"
    CSR="req/$NODEID.csr"
}

###################################################################################
# Switch to the approriate environment for handling requests
###################################################################################
function switch_server_env {

    case "${SERVENV}" in
         Prod)
               cd DataONEProdCA
               CAFILE="../DataONECAChain.crt"
               ;;
         Test)
               cd DataONETestIntCA
               CAFILE="../DataONETestCAChain.crt"
               ;;
         *)
               usage
               ;;
    esac
}


#Show the application name and version.
function version() {
    echo "${APPNAME} version ${VERSION}"
}


# Convert an OpenSSL date to a serial date (seconds from epoch)
function toSerialDate() {
    if [[ $(uname) == "Darwin" ]]; then
        date -junf "%b %e %H:%M:%S %Y %Z" "$@" +%s
    else
        date --date "${@}" +%s
    fi
}

# Convert a serial date to a standard date format.
# input: serial_date [date_format]
function fromSerialDate() {
    local date_format="${dateformat_out}"
    if [[ ! -z ${2} ]]; then
        date_format=${2}
    fi
    if [[ $(uname) == "Darwin" ]]; then
        date -junf "%s" "${1}" "+${date_format}"
    else
        date --date "@${1}" "+${date_format}"
    fi
}



###################################################################################
# Create a certificate and associated private key, named using NODEID
###################################################################################
function create {

    if [ -e $KEY -o -e $PEM -o -e $CSR ]; then
        echo "WARNING: Files for $NODEID already exist. Be sure to revoke as needed...\n"
        SERIAL=1
        while [ -e $KEY -o -e $PEM -o -e $CSR ]; do
            KEY="$KEYS/$NODEID-$SERIAL.key"
            PEM="certs/$NODEID-$SERIAL.pem"
            CSR="req/$NODEID-$SERIAL.csr"
            ((SERIAL++)) 
        done
        echo "Using $PEM, $KEY"
    fi
    if [ -e $KEY -o -e $PEM -o -e $CSR ]; then
        echo "ERROR: Files for $NODEID already exist. Exiting..."
        exit 1
    fi
    echo "Creating certificate for $NODEID"

    # Set up our config file with the right NODEID
    sed -e "s/NODEID/${NODEID}/" $TMPL > $CFG_TEMP

    # Check if a provided SubjectInfo file is an absolute path or relative
    ABSOLUTE=`echo $SIFILE | awk '/^\// {print "1"}'`
    if [ "$ABSOLUTE" ]
    then
       SIFILE_ADJ=$SIFILE
    else
       SIFILE_ADJ="../$SIFILE"
    fi

    # Set up our config file with the right subject info block
    if [ "$SIFILE" -a -r $SIFILE_ADJ ]
    then
        echo "Using SubjectInfo from $SIFILE_ADJ"
        SINFO=$(cat $SIFILE_ADJ | tr -d '\n' | sed s/'\"'/'\\\\"'/g | sed s/'#'/'\\\\#'/g)
        sed -e "s#<SUBJECT_INFO>#subject_info=ASN1:UTF8String:${SINFO}#" $CFG_TEMP > $CFG
    else
        echo "Omitting SubjectInfo from certificate"
        sed -e "s/<SUBJECT_INFO>//" $CFG_TEMP > $CFG
    fi

    # Create a private key for the Node, and strip off its password
    echo "genrsa..."
    ${OPENSSL} genrsa -passout $PASS -des3 -out $KEYS/${NODEID}-pass.key $KEYSIZE
    echo "rsa..."
    ${OPENSSL} rsa -passin $PASS -in $KEYS/${NODEID}-pass.key -out $KEY
    rm $KEYS/${NODEID}-pass.key

    # Create a certificate signing request for the node
    echo "req..."
    ${OPENSSL} req -config $CFG -batch -new -key $KEY -out $CSR

    # Create the certificate for the node
    echo "ca..."
    echo "CFG = ${CFG}"
    ${OPENSSL} ca -config $CFG -md $MD -batch -notext -create_serial $DAYS -out $PEM -infiles $CSR

    # Clean up temporary files
    rm $CFG_TEMP $CFG

    echo "CERT: ${PEM}"
    echo "KEY : ${KEY}"
    export CERTIFICATE_FILE="$(pwd)/${PEM}"
    echo ${CERTIFICATE_FILE} | pbcopy
    echo "Path to certificate file placed on clipboard."
}

###################################################################################
# Revoke the certificate named using NODEID
###################################################################################
function revoke {

    if [ -e $PEM ]; then
        echo "Revoking certificate for $NODEID"
        ${OPENSSL} ca -config $CFG -revoke $PEM
    else
        echo "ERROR: Certificate for $NODEID does not exist. Exiting..."
        exit 1
    fi
}

###################################################################################
# Display the certificate named using NODEID
###################################################################################
function display {
    echo "Displaying certificate for $NODEID"
    ${OPENSSL} x509 -in certs/${NODEID}.pem -noout -text -nameopt RFC2253 -certopt ext_parse
}

###################################################################################
# Generate a Certificate Revocation List (CRL) from the certificate database. This
# must be published at the correct location on the web.
###################################################################################
function gencrl {
    echo "Generating Certificate Revocation List (CRL)"
    CRL="crl/DataONE${SERVENV}CA_CRL.pem"
    if [[ ${SERVENV} == "Test" ]]; then
        CRL="crl/DataONE${SERVENV}Int_CRL.pem"
    fi
    ${OPENSSL} ca -config $CFG -gencrl -out $CRL

    #Report next update time to user
    _TMP=$(${OPENSSL} crl -nextupdate -noout -in ${CRL} \
        | awk -F= ' /nextUpdate/ { printf("%s\n",$NF); } ');
    crlUpdateDate=$(toSerialDate "${_TMP}")
    fromSerialDate "${crlUpdateDate}"
    echo "CRL Needs to be updated before: $(fromSerialDate ${crlUpdateDate})"
}


###################################################################################
# Verify a certificate against a certificate chain.
###################################################################################

function verify {
  echo "Verifying certificate for $NODEID"
  ${OPENSSL} verify -CAfile ${CAFILE} ${PEM}
}


###################################################################################
# Display usage information for the program
###################################################################################
function usage {
    version
    echo " " 
    echo "Display, create, or revoke a certificate for CommonName." 
    echo " " 
    echo "Usage: $0 [-c][-r][-d] <Prod|Test> <CommonName> [subject_info]"
    echo "Usage: $0 [-g] <Prod|Test>"
    echo "Usage: $0 [-h]"
    echo "Usage: $0 [-V]"
    echo " " 
    echo "Where:"
    echo "  CommonName is the common name of the certificate to create"
    echo "  Prod|Test is an indicator of whether to work in the Production or Test CA"
    echo "  subject_info is the optional file name containing subjectinfo XML"
    echo " " 
    echo "  -c: create the certificate for the node"
    echo "  -r: revoke the certificate for the node"
    echo "  -d: display the certificate for the node"
    echo "  -g: generate the certificate revocation list"
    echo "  -v: verify the certificate against the CA chain"
    echo "  -h: display usage help"
    echo "  -V: show version and exit"
    echo " " 
    echo "In the first form, absent -c and -r, the certificate is displayed."
    echo " " 
    echo "Example to create a node certificate:"
    echo "  ./ca -c Test urn:node:SOMENODE somenode.xml"
    echo " "
    exit 1
}

###################################################################################
# execute the main function, and then exit
###################################################################################
NUMOPTS=$#
if [ "$1" = "-h" ]
then
    OP=$1
elif [ "$1" = "-V" ]
then
    version;
    exit 0
elif [ "$1" = "-g" ]
then
    OP=$1
    SERVENV=$2
elif [ "$NUMOPTS" -eq "4" ]
then
    OP=$1
    SERVENV=$2
    NODEID=$3
    SIFILE=$4
elif [ "$NUMOPTS" -eq "3" ]
then
    OP=$1
    SERVENV=$2
    NODEID=$3
elif [ "$NUMOPTS" -eq "2" ]
then
    OP=$1
    SERVENV="Prod"
    NODEID=$2
elif [ "$NUMOPTS" -eq "1" ]
then
    OP="-d"
    SERVENV="Prod"
    NODEID=$1
else
    usage
fi

main
exit 0
